// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId        Int       @id@default(autoincrement()) 
  username      String    @unique @db.VarChar(20)
  email         String    @unique // null or not null is fine == ?
  mobile        String?   @db.VarChar(15)
  password      String    @db.VarChar(100)
  createdAt     DateTime  @default(now()) @db.Timestamp(0) // now == insert current time || no milisec == (0)
  updatedAt     DateTime  @updatedAt @db.Timestamp(0) 

  favsongs FavoriteSong[]
  profile Profile[]
}

model FavoriteSong {
  favoriteSongID    Int    @id@default(autoincrement())
  userId            Int
  songId            Int
  addedAt           DateTime @default(now()) @db.Timestamp(0)

  favsong User @relation(fields: [favoriteSongID], references: [userId]) 
  song Song @relation(fields: [songId], references: [songId])
}

model Song {
  songId            Int  @id@default(autoincrement())
  spotifyId         String
  title             String
  artist            String
  album             String

  songs FavoriteSong[]
  
}

model Profile {
  id                Int  @id@default(autoincrement())
  userId            Int
  username          String

  profile User @relation(fields: [userId], references: [userId])
}